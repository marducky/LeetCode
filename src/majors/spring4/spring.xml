<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--//我们将得到一样的结果，只是实现的方式不一样而已。对于设值注入和构造注入两种方式如何选择呢，-->

    <!--一般的，如果对依赖关系无需变化地注入，尽量采用构造注入。其他依赖关系的注入则考虑采用设值方式注入。-->
    <!--<bean id="chinese" class="majors.spring4.AxeDemo.Chinese">-->
    <!--&lt;!&ndash;<property name="axe" ref="steelAxe" />/\&ndash;&gt;-->
    <!--<constructor-arg ref="stoneAxe"/>-->
    <!--</bean>-->
    <!--<bean id="stoneAxe" class="majors.spring4.AxeDemo.StoneAxe"/>-->
    <!--<bean id="steelAxe" class="majors.spring4.AxeDemo.SteelAxe"/>-->
    <!--<bean id="win" class="javax.swing.JFrame"/>-->
    <!--<bean id="date" class="java.util.Date"/>-->
    <!--<bean id="springHelloWorld" class="majors.spring4.helloSpring.helloworld.impl.SpringHelloWorld"></bean>-->
    <!--<bean id="structHelloWorld" class="majors.spring4.helloSpring.helloworld.impl.StrutsHelloWorld"></bean>-->
    <!--<bean id="helloWorldService" class="majors.spring4.helloSpring.helloworld.HelloWorldService">-->
    <!--<property name="helloWorld" ref="springHelloWorld"/>-->
    <!--</bean>-->
    <bean id="knight" class="majors.spring4.chapter1.BraveKnight">
        <constructor-arg ref="quest"></constructor-arg>
    </bean>
    <bean id="quest" class="majors.spring4.chapter1.SlayDragonQuest">
        <constructor-arg value="#{T(System).out}"></constructor-arg>
    </bean>
    <bean id="minstrel" class="majors.spring4.chapter1.Minstrel">
        <!--<constructor-arg value="#{T(System).out}"></constructor-arg>-->
    </bean>
    <!--<bean id="systemout" class="java.lang.System"></bean>-->
    <aop:config>
        <aop:aspect ref="minstrel">
            <aop:pointcut id="embark" expression="execution(* *.embarkOnQuest(..))"/>
            <aop:before pointcut-ref="embark" method="singBeforeQuest"/>
            <aop:after pointcut-ref="embark" method="singAfterQuest"/>
        </aop:aspect>

    </aop:config>
</beans>