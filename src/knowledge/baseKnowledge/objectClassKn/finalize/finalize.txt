问：finalize()方法是用来做什么的？
答：finalize()方法可以被子类对象所覆盖，然后作为一个终结者，当GC被调用的时候完成最后的清理工作（例如释放系统资源之类）。这就是终止。默认的finalize()方法什么也不做，当被调用时直接返回。
对于任何一个对象，它的finalize()方法都不会被JVM执行两次。如果你想让一个对象能够被再次调用的话（例如，分配它的引用给一个静态变量），注意当这个对象已经被GC回收的时候，finalize()方法不会被调用第二次。
问：finalize()方法是用来做什么的？
答：finalize()方法可以被子类对象所覆盖，然后作为一个终结者，当GC被调用的时候完成最后的清理工作（例如释放系统资源之类）。这就是终止。默认的finalize()方法什么也不做，当被调用时直接返回。
对于任何一个对象，它的finalize()方法都不会被JVM执行两次。如果你想让一个对象能够被再次调用的话（例如，分配它的引用给一个静态变量），注意当这个对象已经被GC回收的时候，finalize()方法不会被调用第二次。
问： 应该使用什么来替代终结器？
答： 提供一个明确的用来销毁这个对象的方法（例如，java.io.FileInputStream的void close()方法），并且在代码中使用try - finally结构来调用这个方法，以确保无论有没有异常从try中抛出，都会销毁这个对象。参考下面释放锁的代码：
问： 什么情况下适合使用终结器？
答： 终结器可以作为一个安全保障，以防止声明的终结方法（像是java.io.FileOutputStream对象的close()方法或者java.util.concurrent.Lock对象的Lock()方法）没有被调用。万一这种情况出现，终结器可以在最后被调用，释放临街资源。